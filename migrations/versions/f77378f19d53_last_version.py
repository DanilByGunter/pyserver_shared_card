"""last version

Revision ID: f77378f19d53
Revises: 
Create Date: 2023-12-23 20:21:00.594748

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f77378f19d53'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('category',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.Column('name_en', sa.String(length=32), nullable=True),
    sa.Column('status', sa.BOOLEAN(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('shop',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.Column('name_en', sa.String(length=32), nullable=True),
    sa.Column('status', sa.BOOLEAN(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('metric',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.Column('name_en', sa.String(length=32), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('currency',
    sa.Column('code', sa.VARCHAR(length=3), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.Column('code_en', sa.String(length=3), nullable=True),
    sa.Column('units', sa.INTEGER(), nullable=True),
    sa.Column('course', sa.FLOAT(), nullable=True),
    sa.PrimaryKeyConstraint('code'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user_account',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('id_user', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=128), nullable=False),
    sa.Column('registered_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('hashed_password', sa.String(length=1024), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id_user')
    )
    op.create_table('user',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('id_user', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.Column('photo', sa.String(length=256), nullable=True),
    sa.Column('weight', sa.INTEGER(), nullable=True),
    sa.Column('height', sa.INTEGER(), nullable=True),
    sa.Column('age', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['id_user'], ['user_account.id_user'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.Column('name_en', sa.String(length=32), nullable=True),
    sa.Column('id_category', sa.Integer(), nullable=True),
    sa.Column('fat', sa.FLOAT(), nullable=True),
    sa.Column('protein', sa.FLOAT(), nullable=True),
    sa.Column('carb', sa.FLOAT(), nullable=True),
    sa.Column('calorie', sa.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['id_category'], ['category.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('recipe',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.Column('name_en', sa.String(length=32), nullable=True),
    sa.Column('description', sa.String(length=128), nullable=True),
    sa.Column('portion', sa.Integer(), nullable=True),
    sa.Column('calories', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('recipe_product_association',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_product', sa.INTEGER(), nullable=False),
    sa.Column('id_recipe', sa.Integer(), nullable=False),
    sa.Column('id_metric', sa.Integer(), nullable=True),
    sa.Column('count', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['id_metric'], ['metric.id'], ),
    sa.ForeignKeyConstraint(['id_product'], ['product.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_recipe'], ['recipe.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_recipe', 'id_product', name='idx_recipe_product')
    )
    op.create_table('group',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=32), nullable=True),
    sa.Column('photo', sa.String(length=256), nullable=True),
    sa.Column('creation_date', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('status', postgresql.ENUM('local', 'GLOBAL', name='group_status'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_group_id'), 'group', ['id'], unique=False)
    op.create_table('check',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('id_product', sa.INTEGER(), nullable=False),
    sa.Column('id_shop', sa.Integer(), nullable=True),
    sa.Column('id_currency', sa.VARCHAR(length=3), nullable=True),
    sa.Column('id_metric', sa.Integer(), nullable=True),
    sa.Column('id_group', sa.UUID(), nullable=False),
    sa.Column('id_creator', sa.UUID(), nullable=False),
    sa.Column('id_buyer', sa.UUID(), nullable=True),
    sa.Column('date_create', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('date_close', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('description', sa.String(length=128), nullable=True),
    sa.Column('count', sa.INTEGER(), nullable=True),
    sa.Column('price', sa.INTEGER(), nullable=True),
    sa.Column('status', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['id_buyer'], ['user.id'], ),
    sa.ForeignKeyConstraint(['id_creator'], ['user.id'], ),
    sa.ForeignKeyConstraint(['id_currency'], ['currency.code'], ),
    sa.ForeignKeyConstraint(['id_group'], ['group.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_metric'], ['metric.id'], ),
    sa.ForeignKeyConstraint(['id_product'], ['product.id'], ),
    sa.ForeignKeyConstraint(['id_shop'], ['shop.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('group_user_association',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('id_user', sa.UUID(), nullable=False),
    sa.Column('id_group', sa.UUID(), nullable=False),
    sa.Column('status', postgresql.ENUM('CREATOR', 'ADMIN', 'USER', name='user_status'), nullable=True),
    sa.Column('date_invite', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['id_group'], ['group.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_user'], ['user.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_user', 'id_group', name='idx_group_user')
    )
    op.create_table('target',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('id_category', sa.Integer(), nullable=True),
    sa.Column('id_shop', sa.Integer(), nullable=True),
    sa.Column('id_currency', sa.VARCHAR(length=3), nullable=True),
    sa.Column('id_group', sa.UUID(), nullable=False),
    sa.Column('id_creator', sa.UUID(), nullable=False),
    sa.Column('id_buyer', sa.UUID(), nullable=True),
    sa.Column('date_create', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('date_close', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('description', sa.String(length=128), nullable=True),
    sa.Column('name', sa.String(length=32), nullable=True),
    sa.Column('price_first', sa.INTEGER(), nullable=True),
    sa.Column('price_last', sa.INTEGER(), nullable=True),
    sa.Column('status', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['id_buyer'], ['user.id'], ),
    sa.ForeignKeyConstraint(['id_category'], ['category.id'], ),
    sa.ForeignKeyConstraint(['id_creator'], ['user.id'], ),
    sa.ForeignKeyConstraint(['id_currency'], ['currency.code'], ),
    sa.ForeignKeyConstraint(['id_group'], ['group.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_shop'], ['shop.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('group_token',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('id_group', sa.UUID(), nullable=False),
    sa.Column('token', sa.String(length=12), nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['id_group'], ['group.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_group')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('group_token')
    op.drop_table('target')
    op.drop_table('group_user_association')
    op.drop_table('check')
    op.drop_index(op.f('ix_group_id'), table_name='group')
    op.drop_table('group')
    op.drop_table('recipe_product_association')
    op.drop_table('recipe')
    op.drop_table('product')
    op.drop_table('user')
    op.drop_table('user_account')
    op.drop_table('currency')
    op.drop_table('metric')
    op.drop_table('shop')
    op.drop_table('category')
    # ### end Alembic commands ###
